'use strict';

const { Readable } = require('readable-stream');
const debug = require('utils/debug')('dtls:sender');
const { createEncodeStream, encode } = require('binary-data');
const bl = require('bl');
const {
  contentType,
  handshakeType,
  compressionMethod,
  cipherSuites,
  extensionTypes,
  namedCurves,
  kxTypes,
  signatureScheme,
} = require('lib/constants');
const {
  Alert,
  ALPNProtocolNameList,
  Certificate,
  DTLSPlaintext,
  Handshake,
  ClientHello,
  EncryptedPreMasterSecret,
  ExtensionList,
  ECPublicKey,
  DigitallySigned,
} = require('lib/protocol');
const { encryptPreMasterSecret } = require('session/utils');
const { constants: states, getProtocol } = require('fsm/states');
const {
  states: { SENDING },
} = require('fsm/retransmitter');

const changeCipherSpecMessage = Buffer.alloc(1, 1);
const defaultCompressionMethods = [compressionMethod.NULL];

const defaultCipherSuites = Object.keys(cipherSuites).map(
  cipher => cipherSuites[cipher]
);

const {
  CLIENT_HELLO,
  FINISHED,
  CERTIFICATE,
  CHANGE_CIPHER_SPEC,
  CLIENT_KEY_EXCHANGE,
  HANDSHAKE,
  CERTIFICATE_VERIFY,
} = states;

const EMPTY_BUFFER = Buffer.alloc(0);

const namedCurvesExtension = Buffer.from([
  0,
  4, // length in bytes
  0,
  namedCurves.secp384r1,
  0,
  namedCurves.secp521r1,
]);

const propOwn = Object.getOwnPropertyNames(signatureScheme);

let signatureExtension = Buffer.alloc(2)
signatureExtension.writeInt16BE(propOwn.length*2)
for(let key in signatureScheme) { 
  let buf = Buffer.alloc(2);
  buf.writeInt16BE(signatureScheme[key])
  signatureExtension = Buffer.concat([signatureExtension, buf], signatureExtension.length + 2)
}

const ecPointFormatExtension = Buffer.from([
  1, // length in bytes
  0, // uncompressed points format
]);

const DTLS_RECORD_SIZE = 13;
const DTLS_HANDSHAKE_SIZE = 12;

const _output = Symbol('_output');
const _session = Symbol('_session');
const _drain = Symbol('_drain');
const _bufferDrain = Symbol('_buffer_drain');
const _queue = Symbol('_queue');
const _nextPacketQueue = Symbol('_next_packet_queue');
const _clientHello = Symbol('_client_hello');
const _finished = Symbol('_finished');
const _certificate = Symbol('_certificate');
const _changeCipherSpec = Symbol('_change_cipher_spec');
const _clientKeyExchange = Symbol('_client_key_exchange');
const _certificateVerify = Symbol('_certificate_verify');
const _alert = Symbol('_alert');
const _applicationData = Symbol('_application_data');

const senders = {
  [CLIENT_HELLO]: _clientHello,
  [FINISHED]: _finished,
  [CERTIFICATE]: _certificate,
  [CHANGE_CIPHER_SPEC]: _changeCipherSpec,
  [CLIENT_KEY_EXCHANGE]: _clientKeyExchange,
  [CERTIFICATE_VERIFY]: _certificateVerify,
};

module.exports = class Sender extends Readable {
  /**
   * @param {AbstractSession} session
   */
  constructor(session) {
    super();

    const output = {
      alert: createEncodeStream(Alert),
      record: createEncodeStream(DTLSPlaintext),
      handshake: createEncodeStream(Handshake),
    };

    output.alert.on('data', packet => {
      this.sendRecord(packet, contentType.ALERT);
    });

    output.handshake.on('data', packet => {
      session.retransmitter.append(HANDSHAKE, this.session.clientEpoch, packet);
      this.sendRecord(packet, contentType.HANDSHAKE);
    });

    output.record.on('data', packet => this[_bufferDrain](packet));

    this[_output] = output;
    this[_session] = session;
    this[_queue] = [];
    this[_nextPacketQueue] = bl();

    session.on('send', state => this[senders[state]]());

    session.on('send:appdata', payload => this[_applicationData](payload));
    session.on('send:alert', (description, level) =>
      this[_alert](level, description)
    );

    // Merge outgoing handshake packets before send.
    session.retransmitter.on(SENDING, () => this[_drain]());

    // Send stored handshake message again.
    session.retransmitter.on('data', ({ type, epoch, packet }) =>
      this.sendRecord(packet, getProtocol(type), epoch)
    );
  }

  /**
   * @returns {{alert, record, handshake}}
   */
  get output() {
    return this[_output];
  }

  /**
   * @returns {AbstractSession}
   */
  get session() {
    return this[_session];
  }

  /**
   * @private
   */
  _read() {} // eslint-disable-line class-methods-use-this

  /**
   * @param {Buffer} message
   * @param {contentType} type
   * @param {number} [epoch]
   */
  sendRecord(message, type, epoch = null) {
    const outgoingEpoch = Number.isInteger(epoch)
      ? epoch
      : this.session.clientEpoch;

    const record = {
      type,
      version: this.session.version,
      epoch: outgoingEpoch,
      sequenceNumber: this.session.nextRecordNumber(),
      length: message.length,
      fragment: message,
    };

    if (type !== contentType.ALERT && type !== contentType.CHANGE_CIPHER_SPEC) {
      const isPreviousEpoch = this.session.clientEpoch - outgoingEpoch === 1;
      const cipher = isPreviousEpoch
        ? this.session.prevCipher
        : this.session.cipher;

      debug('encrypt, cipher = %s', cipher.blockAlgorithm);
      this.session.encrypt(cipher, record);
      debug('success');
    }

    this.output.record.write(record);
  }

  /**
   * @param {Buffer} message Packet payload.
   * @param {handshakeType} type
   */
  sendHandshake(message, type) {
    const { mtu } = this.session;
    const packetLength = this[_nextPacketQueue].length;

    const remainder = mtu - packetLength;
    const payloadRemainder = remainder - DTLS_RECORD_SIZE - DTLS_HANDSHAKE_SIZE;
    const isEnough = payloadRemainder - message.length;

    // Fragmented handshakes must have the same seq number.
    // Also, save this number between parts.
    const sequence = this.session.nextHandshakeNumber();

    /**
     * @private
     * @param {Buffer} payload
     * @param {number} offset
     * @returns {Object}
     */
    const createPacket = (payload, offset = 0) => ({
      type,
      length: message.length,
      sequence,
      fragment: {
        offset,
        length: payload.length,
      },
      body: payload,
    });

    // Store unfragmented handshake message.
    this.session.appendHandshake(createPacket(message));

    if (isEnough >= 0) {
      this.output.handshake.write(createPacket(message));
    } else {
      debug(
        'start handshake fragmentation, remainder = %s bytes, data = %s bytes',
        payloadRemainder,
        message.length
      );
      let payloadLength = message.length;
      let offset = 0;

      // Send first part
      this.output.handshake.write(
        createPacket(message.slice(0, payloadRemainder))
      );
      offset += payloadRemainder;
      payloadLength -= payloadRemainder;
      debug(
        'enqueue %s bytes, %s bytes remaind',
        payloadRemainder,
        payloadLength
      );

      // Send next parts
      while (payloadLength > 0) {
        const dataLegth = mtu - DTLS_RECORD_SIZE - DTLS_HANDSHAKE_SIZE;

        this.output.handshake.write(
          createPacket(message.slice(offset, offset + dataLegth), offset)
        );

        offset += dataLegth;
        payloadLength -= dataLegth;
        debug(
          'enqueue %s bytes, %s bytes remaind',
          dataLegth,
          Math.max(payloadLength, 0)
        );
      }
    }
  }

  /**
   * Send `Alert` message.
   * @param {number} level
   * @param {number} code
   */
  sendAlert(level, code) {
    debug('send Alert');

    const message = {
      level,
      description: code,
    };

    this.output.alert.write(message);
  }

  /**
   * Send `Client Hello` message.
   */
  [_clientHello]() {
    debug('send Client Hello');

    const clientHello = {
      clientVersion: this.session.version,
      random: this.session.clientRandom,
      sessionId: EMPTY_BUFFER, // We do not support resuming session. So, send empty id.
      cookie: this.session.cookie || EMPTY_BUFFER,
      cipherSuites: defaultCipherSuites,
      compressionMethods: defaultCompressionMethods,
    };

    const output = createEncodeStream();
    encode(clientHello, output, ClientHello);

    const extensions = [];

    // Send Extended Master Secret Extension if need.
    if (this.session.extendedMasterSecret) {
      extensions.push({
        type: extensionTypes.EXTENDED_MASTER_SECRET,
        data: EMPTY_BUFFER,
      });
    }

    extensions.push({
      type: extensionTypes.ELLIPTIC_CURVES,
      data: namedCurvesExtension,
    });

    // if (this.session.alpnProtocols.length > 0) {
    //   const alpnOutput = createEncodeStream();
    //   encode(this.session.alpnProtocols, alpnOutput, ALPNProtocolNameList);

    //   extensions.push({
    //     type: extensionTypes.APPLICATION_LAYER_PROTOCOL_NEGOTIATION,
    //     data: alpnOutput.slice(),
    //   });
    // }

    extensions.push({
      type: extensionTypes.EC_POINT_FORMATS,
      data: ecPointFormatExtension,
    });

    extensions.push({
      type: extensionTypes.SIGNATURE_ALGORITHMS,
      data: signatureExtension,
    });

    if (extensions.length > 0) {
      encode(extensions, output, ExtensionList);
    }

    this.sendHandshake(output.slice(), handshakeType.CLIENT_HELLO);
  }

  /**
   * Send `Client Key Exchange` message.
   */
  [_clientKeyExchange]() {
    debug('send Client Key Exchange');

    const output = createEncodeStream();

    if (this.session.nextCipher.kx.id === kxTypes.RSA) {
      const pubkey = this.session.serverPublicKey;
      const premaster = this.session.clientPremaster;
      const encryptedPremaster = encryptPreMasterSecret(pubkey, premaster);

      encode(encryptedPremaster, output, EncryptedPreMasterSecret);
    } else {
      const pubkey = this.session.ellipticPublicKey;

      encode(pubkey, output, ECPublicKey);
    }

    this.sendHandshake(output.slice(), handshakeType.CLIENT_KEY_EXCHANGE);
  }

  /**
   * Send `Change Cipher Spec` message.
   */
  [_changeCipherSpec]() {
    debug('send Change Cipher Spec');

    this.session.retransmitter.append(
      CHANGE_CIPHER_SPEC,
      this.session.clientEpoch,
      changeCipherSpecMessage
    );
    this.sendRecord(changeCipherSpecMessage, contentType.CHANGE_CIPHER_SPEC);
  }

  /**
   * Send `Certificate` message.
   */
  [_certificate]() {
    debug('send client certificate');

    const packet = {
      certificateList: [],
    };

    if (this.session.clientCertificate !== null) {
      packet.certificateList.push(this.session.clientCertificate.raw);
    }

    const output = createEncodeStream();

    encode(packet, output, Certificate);

    this.sendHandshake(output.slice(), handshakeType.CERTIFICATE);
  }

  /**
   * Send `Certificate Verify` message.
   */
  [_certificateVerify]() {
    debug('send client certificate');

    const digitalSignature = {
      algorithm: this.session.clientCertificateSignatureAlgorithm,
      signature: this.session.clientCertificateSignature,
    };

    const output = createEncodeStream();
    encode(digitalSignature, output, DigitallySigned);

    this.sendHandshake(output.slice(), handshakeType.CERTIFICATE_VERIFY);
  }

  /**
   * Send `Finished` message.
   */
  [_finished]() {
    debug('send Finished');

    this.sendHandshake(this.session.clientFinished, handshakeType.FINISHED);
  }

  /**
   * Send `application data` message.
   * @param {Buffer} payload
   * @private
   */
  [_applicationData](payload) {
    this.sendRecord(payload, contentType.APPLICATION_DATA);
  }

  /**
   * Send `alert` message.
   * @private
   * @param {number} level
   * @param {number} description
   */
  [_alert](level, description) {
    this.output.alert.write({
      level,
      description,
    });
  }

  /**
   * Clears internal message buffer and sends packets.
   * @private
   */
  [_drain]() {
    const nextPacketLength = this[_nextPacketQueue].length;

    if (nextPacketLength > 0) {
      this[_queue].push(this[_nextPacketQueue].slice());
      this[_nextPacketQueue].consume(nextPacketLength);
    }

    if (this[_queue].length === 0) {
      debug('empty out queue');
      return;
    }

    debug('drain queue');
    this[_queue].forEach(packet => this.push(packet));
    this[_queue].length = 0;

    this.session.retransmitter.wait();
  }

  /**
   * @param {Buffer} packet Record layer message.
   * @private
   */
  [_bufferDrain](packet) {
    if (this.session.isHandshakeInProcess) {
      debug('buffer packet');

      const { mtu } = this.session;
      const queueLength = this[_nextPacketQueue].length;
      const probablyLength = mtu - queueLength - packet.length;

      if (probablyLength < 0) {
        this[_queue].push(this[_nextPacketQueue].slice());
        this[_nextPacketQueue].consume(queueLength);
      }

      this[_nextPacketQueue].append(packet);
    } else {
      debug('send packet');
      this.push(packet);
    }
  }
};
